#version 330 core

in vec3 fragmentColor;
in vec3 fragPosition_cameraSpace;
in vec3 fragNormal_cameraSpace;

out vec3 color;

uniform vec3 lightPosition_cameraSpace;
uniform vec3 lightColor; 
uniform vec3 ambientColor;
uniform float shininess; 
uniform float strength;

void main() {
    vec3 N = normalize(fragNormal_cameraSpace);

    vec3 L = normalize(lightPosition_cameraSpace - fragPosition_cameraSpace);

    vec3 ambient = ambientColor * fragmentColor;

    float diff = max(dot(N, L), 0.0);
    vec3 diffuse = lightColor * diff * fragmentColor;

    vec3 viewDir = normalize(-fragPosition_cameraSpace);
    vec3 reflectDir = reflect(-L, N);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    vec3 specular = strength * spec * lightColor;

    color = ambient + diffuse + specular;
}

